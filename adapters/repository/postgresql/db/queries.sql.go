// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCliente = `-- name: CreateCliente :one
INSERT INTO  clientes
(id, nome, cpf, email, ativo)
VALUES ($1, $2, $3, $4, $5)
RETURNING ativo, id, cpf, email, nome
`

type CreateClienteParams struct {
	ID    pgtype.UUID
	Nome  pgtype.Text
	Cpf   pgtype.Text
	Email pgtype.Text
	Ativo bool
}

func (q *Queries) CreateCliente(ctx context.Context, arg CreateClienteParams) (Cliente, error) {
	row := q.db.QueryRow(ctx, createCliente,
		arg.ID,
		arg.Nome,
		arg.Cpf,
		arg.Email,
		arg.Ativo,
	)
	var i Cliente
	err := row.Scan(
		&i.Ativo,
		&i.ID,
		&i.Cpf,
		&i.Email,
		&i.Nome,
	)
	return i, err
}

const deleteAllCliente = `-- name: DeleteAllCliente :exec
DELETE FROM clientes
`

func (q *Queries) DeleteAllCliente(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllCliente)
	return err
}

const deleteCliente = `-- name: DeleteCliente :exec
DELETE FROM clientes WHERE id = $1
`

func (q *Queries) DeleteCliente(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCliente, id)
	return err
}

const getClienteByCPF = `-- name: GetClienteByCPF :one
SELECT ativo, id, cpf, email, nome FROM clientes WHERE cpf = $1 LIMIT 1
`

func (q *Queries) GetClienteByCPF(ctx context.Context, cpf pgtype.Text) (Cliente, error) {
	row := q.db.QueryRow(ctx, getClienteByCPF, cpf)
	var i Cliente
	err := row.Scan(
		&i.Ativo,
		&i.ID,
		&i.Cpf,
		&i.Email,
		&i.Nome,
	)
	return i, err
}

const getClienteByEmail = `-- name: GetClienteByEmail :one
SELECT ativo, id, cpf, email, nome FROM clientes WHERE email = $1 LIMIT 1
`

func (q *Queries) GetClienteByEmail(ctx context.Context, email pgtype.Text) (Cliente, error) {
	row := q.db.QueryRow(ctx, getClienteByEmail, email)
	var i Cliente
	err := row.Scan(
		&i.Ativo,
		&i.ID,
		&i.Cpf,
		&i.Email,
		&i.Nome,
	)
	return i, err
}

const getClienteById = `-- name: GetClienteById :one

SELECT ativo, id, cpf, email, nome FROM clientes WHERE id = $1 LIMIT 1
`

// ----------------------------------------------
// Clientes
func (q *Queries) GetClienteById(ctx context.Context, id pgtype.UUID) (Cliente, error) {
	row := q.db.QueryRow(ctx, getClienteById, id)
	var i Cliente
	err := row.Scan(
		&i.Ativo,
		&i.ID,
		&i.Cpf,
		&i.Email,
		&i.Nome,
	)
	return i, err
}

const listCliente = `-- name: ListCliente :many
SELECT ativo, id, cpf, email, nome FROM clientes ORDER BY cpf
`

func (q *Queries) ListCliente(ctx context.Context) ([]Cliente, error) {
	rows, err := q.db.Query(ctx, listCliente)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.Ativo,
			&i.ID,
			&i.Cpf,
			&i.Email,
			&i.Nome,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCliente = `-- name: UpdateCliente :exec
UPDATE clientes SET
(nome, cpf, email, ativo) = ($2, $3, $4, $5)
WHERE id = $1
`

type UpdateClienteParams struct {
	ID    pgtype.UUID
	Nome  pgtype.Text
	Cpf   pgtype.Text
	Email pgtype.Text
	Ativo bool
}

func (q *Queries) UpdateCliente(ctx context.Context, arg UpdateClienteParams) error {
	_, err := q.db.Exec(ctx, updateCliente,
		arg.ID,
		arg.Nome,
		arg.Cpf,
		arg.Email,
		arg.Ativo,
	)
	return err
}
